//1ヘッダー
#include<stdio.h> //1_1
#include<stdlib.h>//1_2
#include<string.h>//1_3
#include<time.h>  //1_4
#include<conio.h> //1_5
#include<vector>  //1_6
#define M_WIDTH (19)       //2_1迷路の幅
#define M_HEIGHT (19)      //2_2迷路の高さ
#define F_WIDTH (12)       //2_1フィールドの幅
#define F_HEIGHT (18)      //2_2フィールドの高さ
#define B_WIDTH_MAX (4)    //2_3ブロックの最大幅
#define B_HEIGHT_MAX (4)   //2_4ブロックの最大高さ
#define FPS (2)            //2_3一秒あたりの更新頻度
#define INTERVAL (1000/FPS)//2_4更新ごとの待機時間(ミリ秒)
#define FPS2 (1)            //2_5一秒あたりの描画頻度を定義
#define INTERVAL2 (1000/FPS2)//2_6描画間隔を定義(ミリ秒)
#define THAWORLD (7)       //★アイテムの停止時間(更新回数)
//5_2フィールドを宣言する
int field[F_HEIGHT + M_HEIGHT][M_WIDTH];
int defaultfield[F_HEIGHT + M_HEIGHT][M_WIDTH]{
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5},
    {5,6,6,6,6,6,6,6,5,6,5,6,6,6,6,6,6,6,5},
    {5,6,5,5,5,6,5,6,5,6,5,6,5,6,5,5,5,6,5},
    {5,6,5,7,5,6,5,6,6,6,6,6,5,6,5,7,5,6,5},
    {5,6,5,5,5,6,5,5,5,6,5,5,5,6,5,5,5,6,5},
    {5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5},
    {5,6,5,5,5,6,5,5,5,6,5,5,5,6,5,5,5,6,5},
    {5,6,6,6,5,6,5,6,6,6,6,6,5,6,5,6,6,6,5},
    {5,5,5,6,5,6,5,6,5,5,5,6,5,6,5,6,5,5,5},
    {6,6,6,6,6,6,6,6,5,7,5,6,6,6,6,6,6,6,6},
    {5,5,5,6,5,6,5,6,5,5,5,6,5,6,5,6,5,5,5},
    {5,6,6,6,5,6,5,6,6,6,6,6,5,6,5,6,6,6,5},
    {5,6,5,5,5,6,5,5,5,6,5,5,5,6,5,5,5,6,5},
    {5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5},
    {5,6,5,5,5,6,5,5,5,6,5,5,5,6,5,5,5,6,5},
    {5,6,5,7,5,6,5,6,6,6,6,6,5,6,5,7,5,6,5},
    {5,6,5,5,5,6,5,6,5,6,5,6,5,6,5,5,5,6,5},
    {5,6,6,6,6,6,6,6,5,6,5,6,6,6,6,6,6,10,5},
    {5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5},
};
int hozonn = 0, hozonn2 = 7;
int yp = 30, xp = 10, ynp = 30, xnp = 10;
int a = 0;
int main() {
    for (int y = 0; y < F_HEIGHT + M_HEIGHT; y++) {
        //6_3_9フィールドすべての列を反復する
        for (int x = 0; x < M_WIDTH; x++) {
            field[y][x] = defaultfield[y][x];
        }
    }
    while (1) {
        a++;
        //6_7_5画面クリア
        system("cls");
        for (int y = 0; y < F_HEIGHT + M_HEIGHT; y++) {
            //6_3_9フィールドすべての列を反復する
            for (int x = 0; x < M_WIDTH; x++) {
                //6_3_10ブロックの種類で分岐する
                switch (field[y][x]) {
                case 0://6_3_11ブロックなし
                    printf("　");
                    break;
                case 1://6_3_12消せないブロック
                    printf("□");
                    break;
                case 2://6_3_13消せるブロック
                    printf("□");
                    break;
                case 3://6_3_14落下ブロック
                    printf("■");
                    break;
                case 5://6_7_10壁
                    printf("■");
                    break;
                case 6://6_7_11ドット
                    printf("・");
                    break;
                case 7://6_7_9床
                    printf("　");
                    break;
                case 8:
                    printf("β");
                    break;
                case 9:
                    if (a %= 2)printf("□");
                    else printf("凹");
                    break;
                case 10:
                    printf("☆");
                    break;
                }
            }
            printf("\n");
        }
        //6_11_35キーボード入力を判定
        if (_kbhit()) {
            //6_11_37入力されたキーによって分岐
            switch (_getch()) {
            case'w'://6_11_38wがおされたら上へ移動
                ynp--;
                break;
            case's'://6_11_39sがおされたら上へ移動
                ynp++;
                break;
            case'a'://6_11_40aがおされたら上へ移動
                xnp--;
                break;
            case'd'://6_11_41dがおされたら上へ移動
                xnp++;
                break;
            }
        }
        hozonn2 = hozonn;
        hozonn = field[ynp][xnp];
        field[ynp][xnp] = 9;
        field[yp][xp] = hozonn2;
        yp = ynp;
        xp = xnp;
        _getch();
    }
}